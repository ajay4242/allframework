
Documentation version: 3.2 

                               Django documentation¶
===================================================================================
Are you new to Django or to programming? This is the place to start!

    From scratch: 
      Overview 
      Installation
      Tutorial: 
              Part 1: Requests and responses 
              Part 2: Models and the admin site 
              Part 3: Views and templates 
              Part 4: Forms and generic views 
              Part 5: Testing 
              Part 6: Static files |
              Part 7: Customizing the admin site
    Advanced 
      Tutorials: 
            How to write reusable apps 
            Writing your first patch for Django

----------------------------------------------------------------------------------------
                               1 The model layer¶
-----------------------------------------------------------------------------------------------                               
   1 Models: 
       1 - Introduction to models |
       2 - Field types |
       3 - Indexes |
       4 - Meta options | 
       5 - Model class
   2 QuerySets: 
       1 - Making queries |
       2 - QuerySet method reference |
       3 - Lookup expressions
   3 Model instances:
       1 - Instance methods | 
       2 - Accessing related objects
   4 Migrations: 
       1 - Introduction to Migrations | 
       2 - Operations reference | 
       3 - SchemaEditor | 
       4 - Writing migrations
   5 Advanced: 
       1 - Managers | 
       2 - Raw SQL | 
       3 - Transactions | 
       4 - Aggregation | 
       5 - Search | 
       6 - Custom fields | 
       7 - Multiple databases | 
       8 - Custom lookups | 
       9 - Query Expressions | 
      10 - Conditional Expressions | 
      11 - atabase Functions
   6 Other: 
       1 - Supported databases | 
       2 - Legacy databases | 
       3 - Providing initial data | 
       4 - Optimize database access | 
       5 - PostgreSQL specific features
----------------------------------------------------------------------------------------------
                              2 The view layer¶
-----------------------------------------------------------------------------------------------
   Django has the concept of “views” to encapsulate the logic responsible for processing a user’s request and for returning the response. Find all you need to know about views via the links below:

    1 The basics: 
       1 - URLconfs | 
       2 - View functions | 
       3 - Shortcuts | 
       4 - Decorators | 
       5 - Asynchronous Support
   2 Reference: 
       1 - Built-in Views | 
       2 - Request/response objects | 
       3 - TemplateResponse objects
   3 File uploads: 
       1 - Overview | 
       2 - File objects | 
       3 - Storage API | 
       4 - Managing files | 
       5 - Custom storage
   4 Class-based views: 
       1 - Overview | 
       2 - Built-in display views | 
       3 - Built-in editing views | 
       4 - Using mixins | 
       5 - API reference | 
       6 - Flattened index
   5 Advanced: 
       1 - Generating CSV | 
       2 - Generating PDF
   6 Middleware: 
       1 - Overview | 
       2 - Built-in middleware classes
-----------------------------------------------------------------------------------------------
                              3 The template layer¶
-----------------------------------------------------------------------------------------------
    The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:

   1 The basics: 
       1 - Overview
   2 For designers: 
       1 - Language overview | 
       2 - Built-in tags and filters | 
       3 - Humanization
   3 For programmers: 
       1 - Template API | 
       2 - Custom tags and filters | 
       3 - Custom template backend
-----------------------------------------------------------------------------------------------
                              4 Forms¶
-----------------------------------------------------------------------------------------------
    Django provides a rich framework to facilitate the creation of forms and the manipulation of form data.

   1 The basics: 
       1 - Overview | 
       2 - Form API | 
       3 - Built-in fields | 
       4 - Built-in widgets
   22 Advanced: 
       1 - Forms for models | 
       2 - Integrating media | 
       3 - Formsets | 
       4 - Customizing validation
-----------------------------------------------------------------------------------------------
                        5 The development process¶
-----------------------------------------------------------------------------------------------
    Learn about the various components and tools to help you in the development and testing of Django applications:

   1 Settings: 
       1 - Overview | 
       2 - Full list of settings
   2 Applications: 
       1 - Overview
   3 Exceptions: 
       1 -  Overview
   4 django-admin and manage.py: 
       1 - Overview | 
       2 - Adding custom commands
   5 Testing: 
       1 - Introduction | 
       2 - Writing and running tests | 
       3 - Included testing tools | 
       4 - Advanced topics
   6 Deployment: 
       1 - Overview | 
       2 - WSGI servers | 
       3 - ASGI servers | 
       4 - Deploying static files | 
       5 - Tracking code errors by email | 
       6 - Deployment checklist
-----------------------------------------------------------------------------------------------
                            6   The admin¶
-----------------------------------------------------------------------------------------------
    Find all you need to know about the automated admin interface, one of Django’s most popular features:

   1 Admin site
   2 Admin actions
   3 Admin documentation generator
-----------------------------------------------------------------------------------------------
                             7  Security¶
-----------------------------------------------------------------------------------------------
    Security is a topic of paramount importance in the development of Web applications and Django provides multiple protection tools and mechanisms:

   1 Security overview
   2 Disclosed security issues in Django
   3 Clickjacking protection
   4 Cross Site Request Forgery protection
   5 Cryptographic signing
   6 Security Middleware
-----------------------------------------------------------------------------------------------
                              8 Internationalization and localization¶
-----------------------------------------------------------------------------------------------
    Django offers a robust internationalization and localization framework to assist you in the development of applications for multiple languages and world regions:

   1 Overview | 
       1 - Internationalization | 
       2 - Localization | 
       3 - Localized Web UI formatting and form input
   2 Time zones
-----------------------------------------------------------------------------------------------
                          9 Performance and optimization¶
-----------------------------------------------------------------------------------------------
    There are a variety of techniques and tools that can help get your code running more efficiently - faster, and using fewer system resources.

   1 Performance and optimization overview
-----------------------------------------------------------------------------------------------
                          10 Geographic framework¶
-----------------------------------------------------------------------------------------------
    GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data.
-----------------------------------------------------------------------------------------------
                             11  Common Web application tools¶
-----------------------------------------------------------------------------------------------
   Django offers multiple tools commonly needed in the development of Web applications:

   1 Authentication: 
       1 - Overview | 
       2 - Using the authentication system | 
       3 - Password management | Customizing authentication | 
       4 - API Reference
   2 Caching
   3 Logging
   4 Sending emails
   5 Syndication feeds (RSS/Atom)
   6 Pagination
   7 Messages framework
   8 Serialization
   9 Sessions
   10 Sitemaps
   11 Static files management
   12 Data validation
-----------------------------------------------------------------------------------------------
                              12 Other core functionalities¶
-----------------------------------------------------------------------------------------------
    Learn about some other core functionalities of the Django framework:

   1 Conditional content processing
   2 Content types and generic relations
   3 Flatpages
   4 Redirects
   5 Signals
   6 System check framework
   7 The sites framework
   8 Unicode in Django
-----------------------------------------------------------------------------------------------
                             13  The Django open-source project¶
-----------------------------------------------------------------------------------------------
    Learn about the development process for the Django project itself and about how you can contribute:

   1 Community: 
       1 - How to get involved | 
       2 - The release process | 
       3 - Team organization | 
       4 - The Django source code repository | 
       5 - Security policies | 
       6 - Mailing lists
   2 Design philosophies: 
       1 - Overview
   3 Documentation: 
       1 - About this documentation
   4 Third-party distributions: 
       1 - Overview
   5 Django over time: 
       1 - API stability | 
       2 - Release notes and upgrading instructions | 
       3 - Deprecation Timeline

-----------------------------------------------------------------------------------------------
===============================================================================================
